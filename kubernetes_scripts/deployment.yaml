apiVersion: apps/v1
kind: Deployment
metadata:
  name: ner-microservice-deployment
  labels:
    app: ner-microservice
spec:
  minReadySeconds: 120
  revisionHistoryLimit: 1
  replicas: 1
  selector:
    matchLabels:
      component: ner-microservice-pod
  template:
    metadata:
      labels:
        component: ner-microservice-pod
        app: ner-microservice
      annotations:
        dapr.io/enabled: 'true'
        dapr.io/app-id: 'ner-microservice'
        dapr.io/app-port: '8000'
        dapr.io/log-level: 'debug'
        dapr.io/log-as-json: 'true'
        dapr.io/sidecar-liveness-probe-delay-seconds: '180'
        dapr.io/sidecar-readiness-probe-delay-seconds: '120'
        dapr.io/sidecar-readiness-probe-timeout-seconds: '10'
        dapr.io/sidecar-readiness-probe-threshold: '10'
        dapr.io/sidecar-cpu-limit: '500m'
        dapr.io/sidecar-memory-limit: '1000Mi'
        dapr.io/sidecar-cpu-request: '500m'
        dapr.io/sidecar-memory-request: '1000Mi'
        dapr.io/app-max-concurrency: '300'
        dapr.io/http-max-request-size: '100'
    spec:
      serviceAccountName: ocr-microservice-serviceaccount
      containers:
      - image: <ACCOUNT>.dkr.ecr.<REGION>.amazonaws.com/<REPO>:<TAG>
        name: ner-microservice-container
        ports:
          - containerPort: 8000
        env:
        - name: DAPR_API_TOKEN
          valueFrom:
            secretKeyRef:
              name: dapr-api-token
              key: token
        resources:
          limits:
            memory: "14Gi"
            cpu: "7"
          requests:
            memory: "12Gi"
            cpu: "7"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8000
          initialDelaySeconds: 120
          periodSeconds: 5
        lifecycle:
          preStop:
            httpGet:
                path: prestop
                port: 8000
      terminationGracePeriodSeconds: 30
      tolerations:
      - key: "tier"
        operator: "Equal"
        value: "for_ner"
        effect: "NoSchedule"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: reserved
                operator: In
                values: 
                - ner
